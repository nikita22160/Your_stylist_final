const express = require('express');
const router = express.Router();
const Stylist = require('../models/Stylist');
const Appointment = require('../models/Appointment');
const TelegramUser = require('../models/TelegramUser');
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');
const { sendNotification } = require('../telegramBot');

dotenv.config();

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) {
        return res.status(401).json({ message: 'Authentication token required' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        res.status(403).json({ message: 'Invalid token' });
    }
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–ª–∏—Å—Ç–∞
router.post('/stylists', async (req, res) => {
    try {
        const stylist = new Stylist(req.body);
        await stylist.save();
        res.status(201).json(stylist);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å—Ç–∏–ª–∏—Å—Ç–æ–≤
router.get('/stylists', async (req, res) => {
    try {
        const stylists = await Stylist.find();
        res.json(stylists);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ª–∏—Å—Ç–∞ –ø–æ ID
router.get('/stylists/:id', async (req, res) => {
    try {
        const stylist = await Stylist.findById(req.params.id);
        if (!stylist) {
            return res.status(404).json({ message: '–°—Ç–∏–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.json(stylist);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞
router.get('/stylists/:id/appointments', authenticateToken, async (req, res) => {
    try {
        const stylist = await Stylist.findById(req.params.id);
        if (!stylist) {
            return res.status(404).json({ message: '–°—Ç–∏–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        let query = { stylistId: req.params.id };
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –Ω–µ —Å—Ç–∏–ª–∏—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –∑–∞–ø–∏—Å–∏
        if (stylist.phone !== req.user.phone) {
            query.userId = req.user._id;
        }

        const appointments = await Appointment.find(query).populate('userId');
        res.json(appointments);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Telegram
router.get('/check-telegram-user', authenticateToken, async (req, res) => {
    try {
        const userId = req.user._id;
        const telegramUser = await TelegramUser.findOne({ userId });

        if (telegramUser) {
            return res.json({ isRegistered: true });
        } else {
            return res.json({ isRegistered: false, botLink: 'https://t.me/StylistReminderBot' });
        }
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
router.post('/stylists/:id/appointments', authenticateToken, async (req, res) => {
    try {
        const { userId, date, time } = req.body;
        const stylistId = req.params.id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å _id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
        if (userId !== req.user._id) {
            return res.status(403).json({ message: 'Unauthorized: You can only book appointments for yourself' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        const existingAppointment = await Appointment.findOne({
            stylistId,
            date: new Date(date).setHours(0, 0, 0, 0),
            time,
        });
        if (existingAppointment) {
            return res.status(400).json({ message: '–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ' });
        }

        const appointment = new Appointment({
            stylistId,
            userId,
            date,
            time,
        });
        await appointment.save();

        // –ü–æ–ø—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∏–ª–∏—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        const populatedAppointment = await Appointment.findById(appointment._id)
            .populate('userId')
            .populate('stylistId');

        // –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const userIdFromAppointment = populatedAppointment.userId._id;
        const stylistIdFromAppointment = populatedAppointment.stylistId._id;
        const appointmentDate = new Date(appointment.date).toLocaleDateString('ru-RU');

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const userName = `${populatedAppointment.userId.name} ${populatedAppointment.userId.surname}`;
        const userPhone = populatedAppointment.userId.phone;
        const stylistName = `${populatedAppointment.stylistId.name} ${populatedAppointment.stylistId.surname}`;
        const stylistPhone = populatedAppointment.stylistId.phone;
        const stylistChatLink = populatedAppointment.stylistId.chatLink || '–°–≤—è–∂–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç';

        // –ù–∞—Ö–æ–¥–∏–º Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userTelegram = await TelegramUser.findOne({ userId: userIdFromAppointment });
        const stylistTelegram = await TelegramUser.findOne({ userId: stylistIdFromAppointment });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ –∏–º–µ–µ—Ç username)
        const userChatLink = userTelegram && userTelegram.username ? `https://t.me/${userTelegram.username.replace('@', '')}` : '–°–≤—è–∂–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        let botLink = null;
        if (userTelegram) {
            const userMessage = `–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∫ —Å—Ç–∏–ª–∏—Å—Ç—É ${stylistName} –Ω–∞ ${appointmentDate} –≤ ${appointment.time}.\nüìû –¢–µ–ª–µ—Ñ–æ–Ω —Å—Ç–∏–ª–∏—Å—Ç–∞: ${stylistPhone}\nüí¨ –°–≤—è–∑–∞—Ç—å—Å—è: ${stylistChatLink}`;
            await sendNotification(userTelegram.chatId, userMessage);
        } else {
            botLink = 'https://t.me/StylistReminderBot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∏–ª–∏—Å—Ç—É
        if (stylistTelegram) {
            const stylistMessage = `–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${userName} –Ω–∞ ${appointmentDate} –≤ ${appointment.time}.\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: ${userPhone}\nüí¨ –°–≤—è–∑–∞—Ç—å—Å—è: ${userChatLink}`;
            await sendNotification(stylistTelegram.chatId, stylistMessage);
        }

        res.status(201).json({
            appointment: populatedAppointment,
            botLink: botLink ? botLink : undefined, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
        });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
router.delete('/stylists/:id/appointments/:appointmentId', authenticateToken, async (req, res) => {
    try {
        const { id, appointmentId } = req.params;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∏–ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const stylist = await Stylist.findById(id);
        if (!stylist) {
            return res.status(404).json({ message: '–°—Ç–∏–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ —Å—Ç–∏–ª–∏—Å—Ç
        if (stylist.phone !== req.user.phone) {
            return res.status(403).json({ message: 'Unauthorized: You are not this stylist' });
        }

        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å
        const appointment = await Appointment.findById(appointmentId);
        if (!appointment) {
            return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Å—Ç–∏–ª–∏—Å—Ç—É
        if (appointment.stylistId.toString() !== id) {
            return res.status(403).json({ message: 'Unauthorized: This appointment does not belong to this stylist' });
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await Appointment.deleteOne({ _id: appointmentId });
        res.json({ message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

module.exports = router;